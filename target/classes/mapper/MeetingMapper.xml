<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.training.mapper.MeetingMapper">

    <resultMap id="BaseResultMap" type="com.training.entity.Meeting">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="start_time" property="startTime" jdbcType="VARCHAR"/>
        <result column="end_time" property="endTime" jdbcType="VARCHAR"/>
        <result column="creator" property="creator" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="user_id" property="userId" jdbcType="BIGINT"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, name, start_time, end_time, creator, content, create_time, user_id, status
    </sql>

    <insert id="insertMeeting" parameterType="com.training.entity.Meeting" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO meeting (name, start_time, end_time, creator, content, create_time, user_id, status)
        VALUES (#{name}, #{startTime}, #{endTime}, #{creator}, #{content}, #{createTime}, #{userId}, #{status})
    </insert>

    <update id="updateMeeting" parameterType="com.training.entity.Meeting">
        UPDATE meeting
        SET name = #{name},
            start_time = #{startTime},
            end_time = #{endTime},
            creator = #{creator},
            content = #{content},
            status = #{status}
        WHERE id = #{id}
    </update>

    <delete id="deleteMeeting" parameterType="java.lang.Long">
        DELETE FROM meeting WHERE id = #{id}
    </delete>

    <select id="selectMeetingById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM meeting
        WHERE id = #{id}
    </select>

    <select id="selectMeetingList" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM meeting
        <where>
            <if test="name != null and name != ''">
                AND name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="creator != null and creator != ''">
                AND creator LIKE CONCAT('%', #{creator}, '%')
            </if>
            <if test="startDate != null and startDate != ''">
                AND end_time &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND start_time &lt;= #{endDate}
            </if>
            <if test="userId != null">
                AND user_id = #{userId}
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
        ORDER BY create_time DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="countMeetingList" resultType="int">
        SELECT COUNT(*) FROM meeting
        <where>
            <if test="name != null and name != ''">
                AND name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="creator != null and creator != ''">
                AND creator LIKE CONCAT('%', #{creator}, '%')
            </if>
            <if test="startDate != null and startDate != ''">
                AND end_time &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND start_time &lt;= #{endDate}
            </if>
            <if test="userId != null">
                AND user_id = #{userId}
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
    </select>

</mapper> 